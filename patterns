1. Behavioral

1.1 Mediator Pattern

  Define an object that encapsulates how a set of objects interact.Mediator promotes
  loose coupling by keeping objects from referring toeach other explicitly, and
  it lets you vary their interactionindependently

	Usecase: 
  	--> used to handle complex communication between objects
  	--> if the objects that have to interact with each other should or cannot 
  			know from each other (loose coupling)
 
  Advantage:
  	--> all communication is handled by the mediator and the subjects dont need to
  			know anything about each other
  	--> centralized point where communication between subjects is defined
  	--> you can change the type of communication by simply creating a new mediator
  			without having to change the subjects code

1.2 Strategy

  Define a family of algorithms, encapsulate each one, and make theminterchangeable.
  Strategy lets the algorithm vary independently fromclients that use it

  Usecase:     
    --> many related classes differ only in their behavior. Strategies provide a
        way to configure a class with one of many behaviors.
 
    --> you need different variants of an algorithm. For example, you might
        definealgorithms reflecting different space/time trade-offs.Strategies
        can be used when these variants are implemented as a classhierarchy of
        algorithms 
 
    --> an algorithm uses data that clients shouldn't know about. Use theStrategy
        pattern to avoid exposing complex, algorithm-specific datastructures.
 
    --> a class defines many behaviors, and these appear as multipleconditional
        statements in its operations. Instead of manyconditionals, move related
        conditional branches into their ownStrategy class.
 
  Advantage:
    --> context and algorithm can change independently
 
    --> eliminates conditional statements

1.3 Iterator

  Provide a way to access the elements of an aggregate objectsequentially without 
  exposing its underlying representation
 
  Usecase:
     --> to access an aggregate object's contents without exposing its 
         internalrepresentation
     --> to support multiple traversals of aggregate objects
     --> to provide a uniform interface for traversing different 
         aggregatestructures (that is, to support polymorphic iteration)

1.4 Observer

  Define a one-to-many dependency between objects so that when oneobject changes 
  state, all its dependents are notified and updatedautomatically
 
  Usecase:
     --> When an abstraction has two aspects, one dependent on the 
         other.Encapsulating these aspects in separate objects lets you vary 
         and reuse them independently
     --> When a change to one object requires changing others, and you don't know 
         how many objects need to be changed
     --> When an object should be able to notify other objects without 
         making assumptions about who these objects are. In other words, you don't want 
         these objects tightly coupled

1.5 State

  Allow an object to alter its behavior when its internal state changes.The object
  will appear to change its class
 
  Usecase:
     --> An object's behavior depends on its state, and it must change itsbehavior
         at run-time depending on that state
     --> Operations have large, multipart conditional statements that depend onthe
         object's state. This state is usually represented by one or moreenumerated
         constants. Often, several operations will contain thissame conditional
         structure. The State pattern puts each branch of theconditional in a
         separate class. This lets you treat the object'sstate as an object in its
         own right that can vary independently fromother objects

1.6 Chain of Responsibility

  Avoid coupling the sender of a request to its receiver by giving morethan one
  object a chance to handle the request. Chain the receivingobjects and pass the
  request along the chain until an objecthandles it
 
  Usecase:
     --> more than one object may handle a request, and the handler isn't knowna
         priori. The handler should be ascertained automatically
     --> you want to issue a request to one of several objects withoutspecifying
         the receiver explicitly
     --> the set of objects that can handle a request should be specifieddynamically

1.7 Visitor

  Represent an operation to be performed on the elements of an objectstructure.
  Visitor lets you define a new operation without changing the classes of the elements
  on which it operates
 
  Usecase:
     --> an object structure contains many classes of objects with differing
         interfaces, and you want to perform operations on these objects that depend
         on their concrete classes
     --> many distinct and unrelated operations need to be performed on objectsin
         an object structure, and you want to avoid "polluting" theirclasses with
         these operations. Visitor lets you keep related operationstogether by
         defining them in one class. When the object structure isshared by many
         applications, use Visitor to put operations in just thoseapplications that
         need them
     --> the classes defining the object structure rarely change, but you oftenwant
         to define new operations over the structure. Changing the objectstructure
         classes requires redefining the interface to all visitors,which is
         potentially costly. If the object structure classes changeoften, then it's
         probably better to define the operations in those classes

2. Creational 

2.1 Factory 

  Usecase: 
    --> when all all of the potential classes are in the same subclass hierarchy
    --> when you dont know ahead of time what class object you need

  Advantage:
    --> centralize class selection code
    --> encapsulate object creation
    --> the client does not have to know all the subclasses

2.2 Abstract Factory

  Provide an interface for creating families of related or dependent objects without
  specifying their concrete classes

  Usecase:
  --> a system should be independent of how its products are created, composed,
      and represented
  --> a system should be configured with one of multiple families of products
  --> a family of related product objects is designed to be used together, and
      you need to enforce this constraint
  --> you want to provide a class library of products, and you want to reveal
       just their interfaces, not their implementations
 
  Advantage:
    --> it isolates concrete classes (the client only works with the abstraction
      and has no idea of the concrete implementation)
    --> it makes exchanging product families easy
    --> it promotes consistency among products ( only products of the same family 
      will be used ie no kamels and ferns )
 
  Disadvantage:
    --> supporting new kinds of products is difficult since you have to change the 
      interface of the abstract factory which means you have to change pretty much
      everything

2.3 Builder

  Separate the construction of a complex object from its representation so that
  the same construction process can create different representations.
 
  Usecase:
    --> the algorithm for creating a complex object should be independent of the 
        parts that make up the object and how they're assembled
 
    --> the construction process must allow different representations for the 
        object that's constructed

2.4 Singleton

  Ensure a class only has one instance, and provide a global point of access to 
  it

  Usecase:
    --> there must be exactly one instance of a class, and it must be accessible 
        to clients from a well-known access point

    --> when the sole instance should be extensible by subclassing, and clients 
        should be able to use an extended instance without modifying their code

3. Structural

3.1 Composite

  Compose objects into tree structures to represent part-whole hierarchies.
  Composite lets clients treat individual objects and compositions of objects
  uniformly

  Usecase:
    --> you want to represent part-whole hierarchies of objects
    --> you want clients to be able to ignore the difference between compositions
        of objects and individual objects. Clients will treat all objects in the
        composite structure uniformly

3.2 Bridge

  Decouple an abstraction from its implementation so that the two can vary 
  independently

  Usecase:
    --> you want to avoid a permanent binding between an abstraction and its
        implementation. This might be the case, for example, when the implementation
        must be selected or switched at run-time
    --> both the abstractions and their implementations should be extensible by 
        subclassing. In this case, the Bridge pattern lets you combine the different 
        abstractions and implementations and extend them independently
    --> you have a proliferation (starke vermehrung) of classes as shown earlier in 
        the first Motivation diagram. Such a class hierarchy indicates the need for 
        splitting an object into two parts. Rumbaugh uses the term "nested generalizations" 
        [RBP+91] to refer to such class hierarchies

3.3 Flyweight

  Use sharing to support large numbers of fine-grained objects efficiently
 
  Usecase:
     The Flyweight pattern's effectiveness depends heavily on how and where it's used. 
     Apply the Flyweight pattern when all of the following are true
 
     --> An application uses a large number of objects
     --> Storage costs are high because of the sheer quantity of objects
     --> Most object state can be made extrinsic
     --> Many groups of objects may be replaced by relatively few shared objects 
         once extrinsic state is removed
     --> The application doesn't depend on object identity. Since flyweight objects 
         may be shared, identity tests will return true for conceptually distinct
         objects

3.4 Proxy

  Provide a surrogate or placeholder for another object to control access to it
 
  Usecase:
     Proxy is applicable whenever there is a need for a more versatile or sophisticated 
     reference to an object than a simple pointer. Here are several common situations 
     in which the Proxy pattern is applicable
 
     --> A remote proxy provides a local representative for an object in a different 
         address space. NEXTSTEP [Add94] uses the class NXProxy for this purpose. 
         Coplien [Cop92] calls this kind of proxy an "Ambassador.
 
     --> A virtual proxy creates expensive objects on demand. The ImageProxy 
         described in the Motivation is an example of such a proxy
 
     --> A protection proxy controls access to the original object. Protection 
         proxies are useful when objects should have different access rights. For 
         example, KernelProxies in the Choices operating system [CIRM93] provide 
         protected access to operating system objects
 
     --> A smart reference is a replacement for a bare pointer that performs 
         additional actions when an object is accessed. Typical uses include
           o counting the number of references to the real object so that it can
             be freed automatically when there are no more references (also called
             smart pointers [Ede92]).
           o loading a persistent object into memory when it's first referenced.
           o checking that the real object is locked before it's accessed to ensure
             that no other object can change it