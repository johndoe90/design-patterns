1. Behavioral

1.1 Mediator Pattern

  Define an object that encapsulates how a set of objects interact.Mediator promotes
  loose coupling by keeping objects from referring toeach other explicitly, and
  it lets you vary their interactionindependently

	Usecase: 
  	--> used to handle complex communication between objects
  	--> if the objects that have to interact with each other should or cannot 
  			know from each other (loose coupling)
 
  Advantage:
  	--> all communication is handled by the mediator and the subjects dont need to
  			know anything about each other
  	--> centralized point where communication between subjects is defined
  	--> you can change the type of communication by simply creating a new mediator
  			without having to change the subjects code

1.2 Strategy

  Define a family of algorithms, encapsulate each one, and make theminterchangeable.
  Strategy lets the algorithm vary independently fromclients that use it

  Usecase:     
    --> many related classes differ only in their behavior. Strategies provide a
        way to configure a class with one of many behaviors.
 
    --> you need different variants of an algorithm. For example, you might
        definealgorithms reflecting different space/time trade-offs.Strategies
        can be used when these variants are implemented as a classhierarchy of
        algorithms 
 
    --> an algorithm uses data that clients shouldn't know about. Use theStrategy
        pattern to avoid exposing complex, algorithm-specific datastructures.
 
    --> a class defines many behaviors, and these appear as multipleconditional
        statements in its operations. Instead of manyconditionals, move related
        conditional branches into their ownStrategy class.
 
  Advantage:
    --> context and algorithm can change independently
 
    --> eliminates conditional statements

2. Creational 

2.1 Factory 

  Usecase: 
    --> when all all of the potential classes are in the same subclass hierarchy
    --> when you dont know ahead of time what class object you need

  Advantage:
    --> centralize class selection code
    --> encapsulate object creation
    --> the client does not have to know all the subclasses

2.2 Abstract Factory

  Provide an interface for creating families of related or dependent objects without
  specifying their concrete classes

  Usecase:
  --> a system should be independent of how its products are created, composed,
      and represented
  --> a system should be configured with one of multiple families of products
  --> a family of related product objects is designed to be used together, and
      you need to enforce this constraint
  --> you want to provide a class library of products, and you want to reveal
       just their interfaces, not their implementations
 
  Advantage:
    --> it isolates concrete classes (the client only works with the abstraction
      and has no idea of the concrete implementation)
    --> it makes exchanging product families easy
    --> it promotes consistency among products ( only products of the same family 
      will be used ie no kamels and ferns )
 
  Disadvantage:
    --> supporting new kinds of products is difficult since you have to change the 
      interface of the abstract factory which means you have to change pretty much
      everything

2.3 Builder

  Separate the construction of a complex object from its representation so that
  the same construction process can create different representations.
 
  Usecase:
    --> the algorithm for creating a complex object should be independent of the 
        parts that make up the object and how they're assembled
 
    --> the construction process must allow different representations for the 
        object that's constructed

2.4 Singleton

  Ensure a class only has one instance, and provide a global point of access to 
  it

  Usecase:
    --> there must be exactly one instance of a class, and it must be accessible 
        to clients from a well-known access point

    --> when the sole instance should be extensible by subclassing, and clients 
        should be able to use an extended instance without modifying their code

3. Structural

3.1 Composite

 Compose objects into tree structures to represent part-whole hierarchies.
 Composite lets clients treat individual objects and compositions of objects
 uniformly

 Usecase:
    --> you want to represent part-whole hierarchies of objects
    --> you want clients to be able to ignore the difference between compositions
        of objects and individual objects. Clients will treat all objects in the
        composite structure uniformly